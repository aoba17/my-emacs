* 共通設定
** 表示設定
*** 行数表示
    #+BEGIN_SRC emacs-lisp
      (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    #+END_SRC
*** スクロールバー、ツールバーを非表示
    #+BEGIN_SRC emacs-lisp
      (scroll-bar-mode 0)
      (tool-bar-mode 0)
    #+END_SRC
*** 対応する括弧をハイライト
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode t)
      (setf show-paren-style 'mixed)
    #+END_SRC
*** カーソル行をハイライト
    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode t)
    #+END_SRC
*** カーソルタイプ
    #+BEGIN_SRC emacs-lisp
      (setq-default cursor-type 'bar) 
    #+END_SRC
*** 起動時フルスクリーン表示
    #+BEGIN_SRC emacs-lisp
      (set-frame-parameter nil 'fullscreen 'maximized)
    #+END_SRC
** C-hで文字削除
   #+BEGIN_SRC emacs-lisp
     (keyboard-translate ?\C-h ?\C-?)
   #+END_SRC
** ビープ音を消す
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** バックアップファイルや一時ファイルを作成しない
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+END_SRC
** Shift + [←↑→↓] でウィンドウ間移動
   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'windmove-default-keybindings)
       (windmove-default-keybindings))
   #+END_SRC
** TabでSpaceを挿入
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC
** C-x C-fでディレクトリ検索を可能に
   #+BEGIN_SRC emacs-lisp
     (ffap-bindings)
   #+END_SRC
* 環境ごとの設定
** Mac OS のときの設定(キー、フォント等)
   #+BEGIN_SRC emacs-lisp
     (when (and (eq system-type 'darwin) (eq window-system 'ns))
       (setq ns-command-modifier (quote meta))
       (setq ns-option-modifier (quote super))
       (set-frame-parameter nil 'alpha 90)
       (let ((font-name "Ricty Diminished")
             (font-size 18))
         (set-frame-font (concat font-name
                                 "-"
                                 (number-to-string font-size)))
         ;; 全角かな設定
         (set-fontset-font (frame-parameter nil 'font)
                           'japanese-jisx0208
                           (font-spec :family font-name :size font-size))
         ;; 半角ｶﾅ設定
         (set-fontset-font (frame-parameter nil 'font)
                           'katakana-jisx0201
                           (font-spec :family font-name :size font-size))))
   #+END_SRC
* パッケージ設定
** neotree(パッケージツリー)
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :config
       (setq neo-show-hidden-files t)
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))

     (defun neotree-project-dir ()
       "Open NeoTree using the git root."
       (interactive)
       (let ((project-dir (projectile-project-root))
             (file-name (buffer-file-name)))
         (neotree-toggle)
         (if project-dir
             (if (neo-global--window-exists-p)
                 (progn
                   (neotree-dir project-dir)
                   (neotree-find file-name)))
           (message "Could not find git project root."))))

      (global-set-key (kbd "C-q") 'neotree-project-dir)
   #+END_SRC
** exec-path-from-shell-initialize(shellのpath設定引き継ぎ)
   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize))
   #+END_SRC
** all-the-icons(アイコン)
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
   #+END_SRC
** doom-thmes(テーマ設定)
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :custom
       (doom-themes-enable-italic t)
       (doom-themes-enable-bold t)
       :config
       (load-theme 'doom-dracula t)
       (doom-themes-neotree-config)
       (doom-themes-org-config))
   #+END_SRC
** doom-modeline(モードラインの外観)
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :hook (after-init . doom-modeline-mode))
   #+END_SRC
** migemo(ローマ字で日本語検索)
   #+BEGIN_SRC emacs-lisp
     (use-package migemo
       :config
       (setq migemo-command "/usr/local/bin/cmigemo")
       (setq migemo-options '("-q" "--emacs"))
       (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")
       (setq migemo-user-dictionary nil)
       (setq migemo-regex-dictionary nil)
       (setq migemo-coding-system 'utf-8-unix)
       (load-library "migemo")
       (migemo-init))
   #+END_SRC
** helm(検索、補完フレームワーク)
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :bind (("\C-xB" . helm-mini)))
   #+END_SRC
** rainbow-delimiters(括弧に色をつける)
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** beacon(ウィンドウ切り替え時にカーソル部分でアニメーション)
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :config
       (beacon-mode 1)
       (setf beacon-color "#80ffd0"))
   #+END_SRC
** highlight-symbol(シンボルハイライト)
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-symbol
       :bind (("M-s M-r" . highlight-symbol-query-replace))
       :init
       ;; プログラミングモードでシンボルハイライト
       (add-hook 'prog-mode-hook 'highlight-symbol-mode)
       ;; M-n/M-pでシンボル間移動
       (add-hook 'prog-mode-hook 'highlight-symbol-nav-mode)  
       :config
       ;; 0.5秒後に自動ハイライト
       (setf highlight-symbol-idle-delay 0.5))
   #+END_SRC
** org-mode(アウトライナー)
   #+BEGIN_SRC emacs-lisp
     (use-package org-mode
       :bind (("C-c l" . org-store-link)
              ("C-c a" . org-agenda)
              ("C-c c" . org-capture)
              ("C-c b" . org-switchb)))
   #+END_SRC
** magit(git操作)
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("C-x g" . magit-status)))
   #+END_SRC
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :bind (("M-/" . undo-tree-redo))
       :config
       (global-undo-tree-mode t))
   #+END_SRC
** dash-at-point(dashで検索)
   #+BEGIN_SRC emacs-lisp
     (use-package dash-at-point
       :bind (("\C-cd" . dash-at-point)))
   #+END_SRC
** multiple-cursors(カーソル複数生成)
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-c C-<" . mc/mark-all-like-this)))
   #+END_SRC
** projectile(プロジェクト単位の操作)
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))
   #+END_SRC
** smartparens-config(括弧関連のユーティリティ)
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens-config
       :ensure smartparens
       :config
       (progn
         (show-smartparens-global-mode t)
         (define-key sp-keymap (kbd "M-s-<backspace>") 'sp-unwrap-sexp)
         (define-key sp-keymap (kbd "s-<backspace>") 'sp-backward-unwrap-sexp)
         (define-key sp-keymap (kbd "C-s-p") 'sp-add-to-previous-sexp)
         (define-key sp-keymap (kbd "C-s-n") 'sp-add-to-next-sexp)
         (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
         (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
         (smartparens-strict-mode nil)))
   #+END_SRC
** company(コード補完)
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (global-company-mode)
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 2)
       (setq company-selection-wrap-around t))

     (use-package company-quickhelp
       :config
       (company-quickhelp-mode))
   #+END_SRC
** eyebrowse(ワークスペース複数作成)
   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :diminish eyebrowse-mode
       :config
       (progn
         (eyebrowse-mode t)
         (define-key eyebrowse-mode-map (kbd "C-M-.") 'eyebrowse-next-window-config)
         (define-key eyebrowse-mode-map (kbd "C-M-,") 'eyebrowse-prev-window-config)
         (define-key eyebrowse-mode-map (kbd "C-c w d") 'eyebrowse-close-window-config)
         (setq eyebrowse-new-workspace t)))
   #+END_SRC
   C-c C-w 数字でワークスペース切り替え
   番号に対応するワークスペースがない場合は新規作成される
** ace-window(ウィンドウ間ジャンプ)
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
         :ensure t
         :defer 1
         :config
         (set-face-attribute
          'aw-leading-char-face nil
          :foreground "deep sky blue"
          :weight 'bold
          :height 3.0)
         (set-face-attribute
          'aw-mode-line-face nil
          :inherit 'mode-line-buffer-id
          :foreground "lawn green")
         (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
               aw-dispatch-always t
               aw-dispatch-alist
               '((?x aw-delete-window "Ace - Delete Window")
                 (?c aw-swap-window "Ace - Swap Window")
                 (?n aw-flip-window)
                 (?v aw-split-window-vert "Ace - Split Vert Window")
                 (?h aw-split-window-horz "Ace - Split Horz Window")
                 (?m delete-other-windows "Ace - Maximize Window")
                 (?g delete-other-windows)
                 (?b balance-windows)
                 (?u (lambda ()
                       (progn
                         (winner-undo)
                         (setq this-command 'winner-undo))))
                 (?r winner-redo)))

         (when (package-installed-p 'hydra)
           (defhydra hydra-window-size (:color red)
             "Windows size"
             ("h" shrink-window-horizontally "shrink horizontal")
             ("j" shrink-window "shrink vertical")
             ("k" enlarge-window "enlarge vertical")
             ("l" enlarge-window-horizontally "enlarge horizontal"))
           (defhydra hydra-window-frame (:color red)
             "Frame"
             ("f" make-frame "new frame")
             ("x" delete-frame "delete frame"))
           (defhydra hydra-window-scroll (:color red)
             "Scroll other window"
             ("n" joe-scroll-other-window "scroll")
             ("p" joe-scroll-other-window-down "scroll down"))
           (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
           (add-to-list 'aw-dispatch-alist '(?o hydra-window-scroll/body) t)
           (add-to-list 'aw-dispatch-alist '(?\; hydra-window-frame/body) t))
         (ace-window-display-mode t))
   #+END_SRC
* プログラミング言語
** Common Lisp
   #+BEGIN_SRC emacs-lisp
     ;; Load quicklisp
     (load (expand-file-name "~/quicklisp/slime-helper.el"))
     ;; Replace "sbcl" with the path to your implementation
     (setq inferior-lisp-program "/usr/local/bin/sbcl")
     (setq slime-lisp-implementation
           '((sbcl ("/usr/local/bin/sbcl") :coding-system utf-8-unix)))
     ;; load contrib
     (slime-setup '(slime-fancy slime-company slime-cl-indent))
   #+END_SRC
** Scheme
   #+BEGIN_SRC emacs-lisp
     (setq process-coding-system-alist
           (cons '("gosh" utf-8 . utf-8) process-coding-system-alist))
     (setq scheme-program-name "/usr/local/bin/gosh -i")

     (autoload 'scheme-mode "cmuscheme" "Major mode for Scheme." t)
     (autoload 'run-scheme "cmuscheme" "Run an inferior Scheme process." t)

     (defun scheme-other-window ()
       "Run Gauche on other window"
       (interactive)
       (let ((buf-name (buffer-name (current-buffer))))
         (scheme-mode)
         (switch-to-buffer-other-window
          (get-buffer-create "*scheme*"))
         (run-scheme scheme-program-name)
         (switch-to-buffer-other-window
          (get-buffer-create buf-name))))

     (define-key global-map
       "\C-cG" 'scheme-other-window)
   #+END_SRC
** Web(HTML)
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :mode (("\\.html?\\'" . web-mode))
       :config
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-enable-auto-pairing t)
       (setq web-mode-enable-css-colorization t))
   #+END_SRC
